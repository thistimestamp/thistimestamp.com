name: "Build GitHub Pages"
run-name: "Build GitHub Pages"

on:
  workflow_call:
  push:
    branches-ignore: [main]
  pull_request:
    branches: [main]
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review

permissions:
  contents: read

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Install tools"
        run: sudo apt install tidy pandoc

      - name: "Install templates"
        run: |
          mkdir -p ~/.pandoc/templates
          curl -sSL 'https://github.com/tajmone/pandoc-goodies/raw/refs/heads/master/templates/html5/github/GitHub.html5' -o ~/.pandoc/templates/GitHub.html5

      - name: "Retrieve Code of Conduct"
        run: curl -H "${MEDIA_TYPE_HEADER}" -H "${AUTH_TOKEN_HEADER}" -o code-of-conduct.md "${CONTENTS_ENDPOINT}/CODE_OF_CONDUCT.md"
        env:
          CONTENTS_ENDPOINT: '${{ github.api_url }}/repos/${{ github.repository_owner }}/.github/contents'
          MEDIA_TYPE_HEADER: "Accept: application/vnd.github.raw"
          AUTH_TOKEN_HEADER: "Authorization: Bearer ${{ github.token }}"

      - name: "Retrieve Contribution Guidlines"
        run: curl -H "${MEDIA_TYPE_HEADER}" -H "${AUTH_TOKEN_HEADER}" -o contributing.md "${CONTENTS_ENDPOINT}/CONTRIBUTING.md"
        env:
          CONTENTS_ENDPOINT: '${{ github.api_url }}/repos/${{ github.repository_owner }}/.github/contents'
          MEDIA_TYPE_HEADER: "Accept: application/vnd.github.raw"
          AUTH_TOKEN_HEADER: "Authorization: Bearer ${{ github.token }}"

      - name: "Generate a changelog.md file"
        run: gh api "${ENDPOINT}" --template "${TEMPLATE}" | tee changelog.md
        env:
          ENDPOINT: '/repos/${{ github.repository }}/releases'
          TEMPLATE: |
            ---
            lang: en
            title-meta: Changelog
            ...

            # Change Log

            {{range .}}
            ### [{{.name}}](https://${{ github.server_url }}/${{ github.repository }}/releases/tag/{{.tag_name}})

            {{.body}}

            {{end}}

      - name: "Create generated HTML files"
        run: |
          make -f - << \EOF

          all: $(patsubst %.md,%.html,$(wildcard *.md */*.md */*/*.md))
          	rm -f header.html

          %.html: %.md
          	pandoc --template=GitHub.html5 --include-in-header=header.html --from markdown+yaml_metadata_block+backtick_code_blocks+fenced_code_attributes+inline_notes+emoji --to html --standalone $< --output $@

          EOF

      - name: "Create redirect HTML files"
        run: |
          make -f - << \EOF

          all: $(patsubst %.redirect,%.html,$(wildcard *.redirect */*.redirect */*/*.redirect))
          	rm -f redirect.html $(wildcard *.redirect */*.redirect */*/*.redirect)

          %.html: %.redirect
          	@echo "Generating $@..."
          	$(file > $@, $(subst {{ .REDIRECT }},$(file < $<),$(file < redirect.html)))

          EOF

      - name: "Tidy the HTML"
        run: find . -name '*.html' | xargs tidy -indent --wrap 0 --output-html yes --warn-proprietary-attributes no -quiet -modify

      - name: "Generate a security.txt file"
        run: |
          tee security.txt << EOF
          Contact: $(gh api '/repos/${{ github.repository }}' --jq '.homepage')/contact
          Policy: $(gh api '/repos/${{ github.repository }}' --jq '.homepage')/security/policy
          Acknowledgments: $(gh api '/repos/${{ github.repository }}' --jq '.homepage')/humans.txt
          Canonical: $(gh api '/repos/${{ github.repository }}' --jq '.homepage')/security.txt
          Expires: $(date -u +"%Y-12-31T23:59:59.999Z")
          EOF

      - name: "Generate a humans.txt file"
        run: gh api "${ENDPOINT}" --template "${TEMPLATE}" | sh | tee humans.txt
        env:
          ENDPOINT: '/orgs/${{ github.repository_owner }}/repos'
          TEMPLATE: |
            echo "# Contributors by Repository"
            echo
            echo "A huge thanks to all and colaborators who have contributed on GitHub!"
            echo
            {{range .}}
            echo "## {{.full_name}}"
            echo
            gh api '/repos/{{.full_name}}/contributors' --jq '.[].login' | sort -u | xargs -ILOGIN gh api '/users/LOGIN' --jq '"- @" + .login + " (" + (.name // .login) + ")"'
            echo
            {{end}}

      - name: "Generate a robots.txt file"
        run: |
          tee security.txt << EOF
          Sitemap: $(gh api '/repos/${{ github.repository }}' --jq '.homepage')/sitemap.txt
          EOF

      - name: "Generate a sitemap.txt file"
        run: |
          tee sitemap.txt << EOF
          $(find . -type f -printf '%P\n' | grep -v '^.git' | sort | xargs -IPATH gh api '/repos/${{ github.repository }}' --jq '.homepage + "/PATH"')
          EOF

      - name: "Archive Pages Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: pages
          path: |
            .
            !.git*/**
